name: Build Tauri Desktop

on:
  workflow_dispatch:
    inputs:
      os:
        description: Select OS
        type: choice
        options:
          - '[{"platform": "ubuntu-22.04", "args": ""}]'
          - '[{"platform": "ubuntu-22.04-arm", "args": ""}]'
          - '[{"platform": "windows-latest", "args": ""}]'
          - '[{"platform": "macos-latest", "args": "--target aarch64-apple-darwin"}]'
          - '[{"platform": "macos-13", "args": "--target x86_64-apple-darwin"}]'
          - '[{"platform": "ubuntu-22.04", "args": ""}, {"platform": "ubuntu-22.04-arm", "args": ""}, {"platform": "macos-latest", "args": "--target aarch64-apple-darwin"}, {"platform": "macos-13", "args": "--target x86_64-apple-darwin"}, {"platform": "windows-latest", "args": ""}]'
        default: '[{"platform": "ubuntu-22.04", "args": ""}, {"platform": "macos-latest", "args": "--target aarch64-apple-darwin"}, {"platform": "macos-13", "args": "--target x86_64-apple-darwin"}, {"platform": "windows-latest", "args": ""}]'
        required: true
      publish_private:
        description: "Publish release to this repository?"
        type: boolean
        default: true
        required: true
      publish_public:
        description: "Publish build artifacts to public repository?"
        type: boolean
        default: false
        required: true
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(inputs.os) }}

    runs-on: ${{ matrix.platform }}
    env:
      PUBLISH_PRIVATE: ${{ github.event_name != 'workflow_dispatch' || inputs.publish_private }}
      PUBLISH_PUBLIC: ${{ github.event_name == 'workflow_dispatch' && inputs.publish_public }}
      TARGET_PUBLIC_REPO: ${{ vars.PUBLIC_RELEASE_REPO }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.1-dev gir1.2-javascriptcoregtk-4.1 libgtk-3-dev libunwind-dev libappindicator3-dev librsvg2-dev patchelf alsa-tools libasound2-dev libudev-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio
          version: 1.0

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04-arm'
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libwebkit2gtk-4.1-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libfuse2 file gstreamer1.0-pulseaudio libunwind-dev alsa-tools libasound2-dev libudev-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio xdg-utils

      - name: install dependencies (macos only)
        if: matrix.platform == 'macos-latest' || matrix.platform == 'macos-13'
        run: |
          brew update
          brew upgrade
          brew install openssl@3

      # https://github.com/sfackler/rust-openssl/blob/master/.github/workflows/ci.yml#L94
      - name: Install vcpkg (Windows only)
        run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        if: matrix.platform == 'windows-latest'

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        if: matrix.platform == 'windows-latest'
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install OpenSSL (Windows only)
        run: vcpkg install openssl:x64-windows-static-md
        if: matrix.platform == 'windows-latest'
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Prepare FFmpeg bundle (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: pnpm setup:ffmpeg -- --target windows-x86_64

      - name: Prepare FFmpeg bundle (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        shell: bash
        run: pnpm setup:ffmpeg -- --target linux-x86_64

      - name: Prepare FFmpeg bundle (macOS arm64)
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: pnpm setup:ffmpeg -- --target macos-arm64

      - name: Prepare FFmpeg bundle (macOS x86_64)
        if: matrix.platform == 'macos-13'
        shell: bash
        run: pnpm setup:ffmpeg -- --target macos-x86_64

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin,wasm32-unknown-unknown' || 'wasm32-unknown-unknown' }}

      - name: Install trunk
        uses: baptiste0928/cargo-install@v3
        with:
          crate: trunk

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true
          workspaces: |
            . -> target

      - name: Current PWD
        run: pwd

      - name: Install tauri CLI
        run: npm install -g @tauri-apps/cli@latest

      - name: Compute release metadata
        if: ${{ env.PUBLISH_PRIVATE == 'true' || env.PUBLISH_PUBLIC == 'true' }}
        id: release_meta
        shell: bash
        run: |
          VERSION=$(node -pe "JSON.parse(require('fs').readFileSync('apps/tauri/src-tauri/tauri.conf.json','utf8')).version")
          echo "tag=tauri-Music-${VERSION}" >> "$GITHUB_OUTPUT"
          echo "name=tauri - Music - ${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Build Tauri app (no publish)
        if: ${{ env.PUBLISH_PRIVATE != 'true' }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          args: ${{ matrix.args }}
          tauriScript: tauri
          projectPath: "apps/tauri"

      - name: Publish Tauri release
        if: ${{ env.PUBLISH_PRIVATE == 'true' }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: tauri-Music-__VERSION__
          releaseName: "tauri - Music - __VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}
          tauriScript: tauri
          projectPath: "apps/tauri"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: music-build-${{ matrix.platform }}
          path: |
            apps/tauri/src-tauri/target/**/latest.json
            apps/tauri/src-tauri/target/**/*.rpm
            apps/tauri/src-tauri/target/**/*.AppImage
            apps/tauri/src-tauri/target/**/*.AppImage.sig
            apps/tauri/src-tauri/target/**/*.dmg
            apps/tauri/src-tauri/target/**/*.deb
            apps/tauri/src-tauri/target/**/*-setup.exe
            apps/tauri/src-tauri/target/**/*-setup.exe.sig
            apps/tauri/src-tauri/target/**/*_en-US.msi
            apps/tauri/src-tauri/target/**/*_en-US.msi.sig
            apps/tauri/src-tauri/target/**/*.app.tar.gz
            apps/tauri/src-tauri/target/**/*.app.tar.gz.sig

      - name: Publish artifacts to public repository
        if: ${{ env.PUBLISH_PUBLIC == 'true' }}
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.MUSIC_RELEASES_PAT }}
          TARGET_REPO: ${{ env.TARGET_PUBLIC_REPO }}
          RELEASE_TAG: ${{ steps.release_meta.outputs.tag }}
          RELEASE_NAME: ${{ steps.release_meta.outputs.name }}
        run: |
          $ErrorActionPreference = 'Stop'

          if (-not $env:TARGET_REPO) {
            Write-Warning 'Missing vars.PUBLIC_RELEASE_REPO; skip public repository release.'
            exit 0
          }

          if (-not $env:GH_TOKEN) {
            Write-Error 'Missing secrets.MUSIC_RELEASES_PAT; cannot publish to public repository.'
          }

          if (-not $env:RELEASE_TAG) {
            Write-Error 'Missing release tag; cannot publish to public repository.'
          }

          gh release view $env:RELEASE_TAG --repo $env:TARGET_REPO 2>$null
          if ($LASTEXITCODE -ne 0) {
            gh release create $env:RELEASE_TAG --repo $env:TARGET_REPO --title $env:RELEASE_NAME --notes 'Build artifacts only, no source code.' --draft --prerelease
            if ($LASTEXITCODE -ne 0) {
              Write-Error 'Failed to create release in public repository.'
            }
          }

          $patterns = @('latest.json','*.rpm','*.AppImage','*.AppImage.sig','*.dmg','*.deb','*-setup.exe','*-setup.exe.sig','*_en-US.msi','*_en-US.msi.sig','*.app.tar.gz','*.app.tar.gz.sig')
          $files = @()
          Get-ChildItem -Path 'apps/tauri/src-tauri/target' -Recurse -File | ForEach-Object {
            $name = $_.Name
            foreach ($pattern in $patterns) {
              if ($name -like $pattern) {
                $files += $_.FullName
                break
              }
            }
          }

          $files = $files | Sort-Object -Unique
          if (-not $files) {
            Write-Warning 'No build artifacts found; skip public repository release.'
            exit 0
          }

          foreach ($file in $files) {
            gh release upload $env:RELEASE_TAG $file --repo $env:TARGET_REPO --clobber
          }






