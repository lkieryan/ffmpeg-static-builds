name: Build FFmpeg Desktop

on:
  workflow_dispatch:
    inputs:
      ffmpeg-version:
        description: "FFmpeg release tag (e.g. n7.0.2)"
        required: false
        default: "n7.0.2"
      publish-release:
        description: "Publish GitHub release?"
        type: boolean
        default: false
        required: true
  push:
    tags:
      - "ffmpeg-*"

env:
  FFMPEG_VERSION: ${{ github.event_name == 'workflow_dispatch' && inputs.ffmpeg-version || (startsWith(github.ref, 'refs/tags/') && github.ref_name) || 'n7.0.2' }}
  FFMPEG_SOURCE_URL: https://github.com/FFmpeg/FFmpeg

jobs:
  desktop:
    name: Build desktop for ${{ matrix.artifact_suffix }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_suffix: linux-x86_64
          - os: macos-13
            artifact_suffix: macos-x86_64
            mac_arch: x86_64
          - os: macos-14
            artifact_suffix: macos-arm64
            mac_arch: arm64
          - os: windows-latest
            artifact_suffix: windows-mingw-x86_64
            windows_toolchain: mingw
          - os: windows-latest
            artifact_suffix: windows-msvc-x86_64
            windows_toolchain: msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare artifact directory (POSIX)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          set -euo pipefail
          : "${FFMPEG_VERSION:?FFMPEG_VERSION not set}"
          mkdir -p "$GITHUB_WORKSPACE/artifacts"

      - name: Prepare artifact directory (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (-not $env:FFMPEG_VERSION) {
            throw 'FFMPEG_VERSION not set'
          }
          $artifactPath = Join-Path $env:GITHUB_WORKSPACE 'artifacts'
          if (-not (Test-Path $artifactPath)) {
            New-Item -Path $artifactPath -ItemType Directory | Out-Null
          }

      - name: Install build dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf \
            automake \
            build-essential \
            cmake \
            git \
            libtool \
            pkg-config \
            texinfo \
            zlib1g-dev \
            libssl-dev \
            nasm \
            yasm

      - name: Install build dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          brew update
          brew install automake pkg-config nasm yasm cmake

      - name: Set up MSYS2 toolchain (Windows)
        if: matrix.os == 'windows-latest' && matrix.windows_toolchain == 'mingw'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-binutils
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-ca-certificates

      - name: Install build dependencies (Windows MSVC)
        if: matrix.os == 'windows-latest' && matrix.windows_toolchain == 'msvc'
        shell: pwsh
        run: |
          choco install -y nasm yasm ninja --no-progress
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\\vcpkg")) {
            git clone https://github.com/microsoft/vcpkg "$env:GITHUB_WORKSPACE\\vcpkg"
          }
          & "$env:GITHUB_WORKSPACE\\vcpkg\\bootstrap-vcpkg.bat" -disableMetrics
          & "$env:GITHUB_WORKSPACE\\vcpkg\\vcpkg.exe" install zlib:x64-windows openssl:x64-windows

      - name: Build FFmpeg (Linux / macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        env:
          ARTIFACT_SUFFIX: ${{ matrix.artifact_suffix }}
        run: |
          set -euxo pipefail
          cd "$GITHUB_WORKSPACE"
          curl -L "$FFMPEG_SOURCE_URL/archive/refs/tags/${FFMPEG_VERSION}.tar.gz" -o ffmpeg.tar.gz
          tar -xf ffmpeg.tar.gz
          SRC_DIR="FFmpeg-${FFMPEG_VERSION}"
          if [[ ! -d "$SRC_DIR" ]]; then
            SRC_DIR=$(tar -tf ffmpeg.tar.gz | head -1 | cut -d/ -f1)
          fi
          cd "$SRC_DIR"

          PREFIX="$GITHUB_WORKSPACE/build"
          rm -rf "$PREFIX"
          mkdir -p "$PREFIX"

          JOBS=$(sysctl -n hw.ncpu 2>/dev/null || nproc)

          CONFIG_ARGS=(
            --prefix="$PREFIX"
            --disable-shared
            --enable-static
            --enable-gpl
            --enable-version3
            --disable-debug
            --disable-doc
            --disable-ffplay
            --disable-ffprobe
            --enable-demuxer=dash
            --enable-muxer=dash
            --enable-protocol=http
            --enable-protocol=https
          )

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            CONFIG_ARGS+=(--enable-pic --enable-openssl)
          else
            if [[ "${{ matrix.mac_arch }}" == "x86_64" ]]; then
              export CFLAGS="-arch x86_64 -mmacosx-version-min=11.0"
              export LDFLAGS="-arch x86_64 -mmacosx-version-min=11.0"
              CONFIG_ARGS+=(--arch=x86_64 --target-os=darwin)
            else
              export CFLAGS="-arch arm64 -mmacosx-version-min=11.0"
              export LDFLAGS="-arch arm64 -mmacosx-version-min=11.0"
              CONFIG_ARGS+=(--arch=arm64 --target-os=darwin)
            fi
          fi

          ./configure "${CONFIG_ARGS[@]}"
          make -j"$JOBS"
          make install

          PACKAGE_NAME="ffmpeg-${FFMPEG_VERSION}-${ARTIFACT_SUFFIX}.tar.gz"
          cd "$GITHUB_WORKSPACE"
          mkdir -p artifacts
          tar -czf "artifacts/$PACKAGE_NAME" -C build .

      - name: Build FFmpeg (Windows MinGW)
        if: matrix.os == 'windows-latest' && matrix.windows_toolchain == 'mingw'
        shell: msys2 {0}
        env:
          ARTIFACT_SUFFIX: ${{ matrix.artifact_suffix }}
        run: |
          set -euxo pipefail
          export MINGW_PREFIX=/mingw64
          export PATH="$MINGW_PREFIX/bin:$PATH"
          export AR="$MINGW_PREFIX/bin/x86_64-w64-mingw32-gcc-ar"
          export RANLIB="$MINGW_PREFIX/bin/x86_64-w64-mingw32-gcc-ranlib"
          export NM="$MINGW_PREFIX/bin/x86_64-w64-mingw32-gcc-nm"
          export STRIP="$MINGW_PREFIX/bin/strip"
          for tool in "$AR" "$RANLIB" "$NM" "$STRIP"; do command -v "$tool"; done
          ln -sf "$AR" "$MINGW_PREFIX/bin/x86_64-w64-mingw32-ar"
          ln -sf "$RANLIB" "$MINGW_PREFIX/bin/x86_64-w64-mingw32-ranlib"
          ln -sf "$NM" "$MINGW_PREFIX/bin/x86_64-w64-mingw32-nm"
          ln -sf "$STRIP" "$MINGW_PREFIX/bin/x86_64-w64-mingw32-strip"

          export PKG_CONFIG_PATH=/mingw64/lib/pkgconfig
          export PKG_CONFIG=/mingw64/bin/pkg-config

          cd "$GITHUB_WORKSPACE"
          curl -L "$FFMPEG_SOURCE_URL/archive/refs/tags/${FFMPEG_VERSION}.tar.gz" -o ffmpeg.tar.gz
          tar -xf ffmpeg.tar.gz
          SRC_DIR="FFmpeg-${FFMPEG_VERSION}"
          if [[ ! -d "$SRC_DIR" ]]; then
            SRC_DIR=$(tar -tf ffmpeg.tar.gz | head -1 | cut -d/ -f1)
          fi
          cd "$SRC_DIR"

          PREFIX="$GITHUB_WORKSPACE/build"
          rm -rf "$PREFIX"
          mkdir -p "$PREFIX"

          CC="$MINGW_PREFIX/bin/x86_64-w64-mingw32-gcc"
          CXX="$MINGW_PREFIX/bin/x86_64-w64-mingw32-g++"

          CC="$CC" CXX="$CXX" LD="$CC" AR="$AR" RANLIB="$RANLIB" NM="$NM" STRIP="$STRIP" PKG_CONFIG="$PKG_CONFIG" \
          ./configure \
            --prefix="$PREFIX" \
            --target-os=mingw32 \
            --arch=x86_64 \
            --enable-cross-compile \
            --cross-prefix=x86_64-w64-mingw32- \
            --pkg-config=x86_64-w64-mingw32-pkg-config \
            --pkg-config-flags="--static" \
            --disable-debug \
            --disable-doc \
            --disable-ffplay \
            --disable-ffprobe \
            --enable-demuxer=dash \
            --enable-muxer=dash \
            --enable-protocol=http \
            --enable-protocol=https \
            --enable-openssl \
            --disable-shared \
            --enable-static \
            --enable-gpl \
            --enable-version3 \
            --extra-cflags="-static -static-libgcc -static-libstdc++" \
            --extra-libs="-lssl -lcrypto -lws2_32 -lgdi32 -lz -lcrypt32 -lbcrypt" \
            --extra-ldflags="-static"

          make -j"$(nproc)"
          make install

          PACKAGE_NAME="ffmpeg-${FFMPEG_VERSION}-${ARTIFACT_SUFFIX}.tar.gz"
          cd "$GITHUB_WORKSPACE"
          mkdir -p artifacts
          tar -czf "artifacts/$PACKAGE_NAME" -C build .

      - name: Build FFmpeg (Windows MSVC)
        if: matrix.os == 'windows-latest' && matrix.windows_toolchain == 'msvc'
        shell: pwsh
        env:
          ARTIFACT_SUFFIX: ${{ matrix.artifact_suffix }}
        run: |
          $vcvarsCandidates = @(
            "$env:ProgramFiles(x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat",
            "$env:ProgramFiles(x86)\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars64.bat",
            "$env:ProgramFiles(x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          )
          $vcvars = $vcvarsCandidates | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $vcvars) {
            throw 'vcvars64.bat not found'
          }

          $bash = 'C:\Program Files\Git\bin\bash.exe'
          if (-not (Test-Path $bash)) {
            throw 'Git Bash not found'
          }

          $scriptPath = Join-Path $env:GITHUB_WORKSPACE 'msvc-build.sh'
          @'
set -euxo pipefail

WORKSPACE=$(cygpath "$GITHUB_WORKSPACE")
cd "$WORKSPACE"

curl -L "$FFMPEG_SOURCE_URL/archive/refs/tags/${FFMPEG_VERSION}.tar.gz" -o ffmpeg.tar.gz
tar -xf ffmpeg.tar.gz
SRC_DIR="FFmpeg-${FFMPEG_VERSION}"
if [ ! -d "$SRC_DIR" ]; then
  SRC_DIR=$(tar -tf ffmpeg.tar.gz | head -1 | cut -d/ -f1)
fi
cd "$SRC_DIR"

PREFIX="$WORKSPACE/build"
rm -rf "$PREFIX"
mkdir -p "$PREFIX"

VCPKG_ROOT="$GITHUB_WORKSPACE/vcpkg"
INCLUDE_WIN=$(cygpath -w "$VCPKG_ROOT/installed/x64-windows/include")
LIB_WIN=$(cygpath -w "$VCPKG_ROOT/installed/x64-windows/lib")
LIB_POSIX=$(cygpath "$VCPKG_ROOT/installed/x64-windows/lib")

./configure \
  --toolchain=msvc \
  --arch=x86_64 \
  --target-os=win64 \
  --prefix="$PREFIX" \
  --enable-static \
  --disable-shared \
  --disable-doc \
  --disable-ffplay \
  --disable-ffprobe \
  --disable-ffmpeg \
  --enable-gpl \
  --enable-version3 \
  --enable-openssl \
  --enable-zlib \
  --extra-cflags="-I$INCLUDE_WIN" \
  --extra-ldflags="-LIBPATH:$LIB_WIN" \
  --extra-libs="libssl.lib libcrypto.lib zlib.lib ws2_32.lib bcrypt.lib crypt32.lib"

nmake
nmake install

cp "$LIB_POSIX/libssl.lib" "$PREFIX/lib/"
cp "$LIB_POSIX/libcrypto.lib" "$PREFIX/lib/"
if [ -f "$LIB_POSIX/zlib.lib" ]; then
  cp "$LIB_POSIX/zlib.lib" "$PREFIX/lib/"
  cp "$LIB_POSIX/zlib.lib" "$PREFIX/lib/z.lib"
fi

PACKAGE_NAME="ffmpeg-${FFMPEG_VERSION}-${ARTIFACT_SUFFIX}.tar.gz"
cd "$WORKSPACE"
mkdir -p artifacts
tar -czf "artifacts/$PACKAGE_NAME" -C build .

'@ | Set-Content -Path $scriptPath -Encoding utf8NoBOM

          & cmd.exe /c ""$vcvars" && "$bash" --noprofile --norc "$scriptPath""

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ env.FFMPEG_VERSION }}-${{ matrix.artifact_suffix }}
          path: artifacts/ffmpeg-${{ env.FFMPEG_VERSION }}-${{ matrix.artifact_suffix }}.tar.gz

  release:
    name: Publish release
    runs-on: ubuntu-latest
    needs: desktop
    permissions:
      contents: write
    if: >
      (github.event_name == 'workflow_dispatch' && inputs.publish-release) ||
      startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      - name: Prepare release metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            TAG_NAME="ffmpeg-${FFMPEG_VERSION}"
          else
            TAG_NAME="${GITHUB_REF_NAME}"
          fi
          RELEASE_NAME="FFmpeg ${FFMPEG_VERSION}"
          echo "tag=${TAG_NAME}" >> "$GITHUB_OUTPUT"
          echo "name=${RELEASE_NAME}" >> "$GITHUB_OUTPUT"
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          draft: false
          prerelease: false
          files: release-artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}









